/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c UploadManagerAdaptor -a upload_manager_adaptor.h:upload_manager_adaptor.cpp -i metatypes.h com.canonical.applications.upload_manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "upload_manager_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

namespace Ubuntu {

using namespace Errors;

namespace UploadManager {
/*
 * Implementation of adaptor class UploadManagerAdaptor
 */

UploadManagerAdaptor::UploadManagerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

UploadManagerAdaptor::~UploadManagerAdaptor()
{
    // destructor
}

void UploadManagerAdaptor::allowMobileUpload(bool allowed)
{
    // handle method call com.canonical.applications.UploadManager.allowMobileUpload
    QMetaObject::invokeMethod(parent(), "allowMobileUpload", Q_ARG(bool, allowed));
}

QDBusObjectPath UploadManagerAdaptor::createMmsUpload(const QString &url, const QString &file, const QString &hostname, int port, const QString &username, const QString &password)
{
    // handle method call com.canonical.applications.UploadManager.createMmsUpload
    QDBusObjectPath uploadPath;
    QMetaObject::invokeMethod(parent(), "createMmsUpload", Q_RETURN_ARG(QDBusObjectPath, uploadPath), Q_ARG(QString, url), Q_ARG(QString, file), Q_ARG(QString, hostname), Q_ARG(int, port), Q_ARG(QString, username), Q_ARG(QString, password));
    return uploadPath;
}

QDBusObjectPath UploadManagerAdaptor::createUpload(UploadStruct upload)
{
    // handle method call com.canonical.applications.UploadManager.createUpload
    QDBusObjectPath uploadPath;
    QMetaObject::invokeMethod(parent(), "createUpload", Q_RETURN_ARG(QDBusObjectPath, uploadPath), Q_ARG(UploadStruct, upload));
    return uploadPath;
}

qulonglong UploadManagerAdaptor::defaultThrottle()
{
    // handle method call com.canonical.applications.UploadManager.defaultThrottle
    qulonglong speed;
    QMetaObject::invokeMethod(parent(), "defaultThrottle", Q_RETURN_ARG(qulonglong, speed));
    return speed;
}

void UploadManagerAdaptor::exit()
{
    // handle method call com.canonical.applications.UploadManager.exit
    QMetaObject::invokeMethod(parent(), "exit");
}

QList<QDBusObjectPath> UploadManagerAdaptor::getAllUploads()
{
    // handle method call com.canonical.applications.UploadManager.getAllUploads
    QList<QDBusObjectPath> uploads;
    QMetaObject::invokeMethod(parent(), "getAllUploads", Q_RETURN_ARG(QList<QDBusObjectPath>, uploads));
    return uploads;
}

QList<QDBusObjectPath> UploadManagerAdaptor::getAllUploadsWithMetadata(const QString &name, const QString &value)
{
    // handle method call com.canonical.applications.UploadManager.getAllUploadsWithMetadata
    QList<QDBusObjectPath> uploads;
    QMetaObject::invokeMethod(parent(), "getAllUploadsWithMetadata", Q_RETURN_ARG(QList<QDBusObjectPath>, uploads), Q_ARG(QString, name), Q_ARG(QString, value));
    return uploads;
}

bool UploadManagerAdaptor::isMobileUploadAllowed()
{
    // handle method call com.canonical.applications.UploadManager.isMobileUploadAllowed
    bool allowed;
    QMetaObject::invokeMethod(parent(), "isMobileUploadAllowed", Q_RETURN_ARG(bool, allowed));
    return allowed;
}

void UploadManagerAdaptor::setDefaultThrottle(qulonglong speed)
{
    // handle method call com.canonical.applications.UploadManager.setDefaultThrottle
    QMetaObject::invokeMethod(parent(), "setDefaultThrottle", Q_ARG(qulonglong, speed));
}

}  // UploadManager

}  // Ubuntu
